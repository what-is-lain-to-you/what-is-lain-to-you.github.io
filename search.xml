<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2</title>
      <link href="/2023/04/10/HW01%20-/"/>
      <url>/2023/04/10/HW01%20-/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>HW00 - 环境配置</title>
      <link href="/2023/04/10/HW00%20-%20%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
      <url>/2023/04/10/HW00%20-%20%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>环境配置没啥好说的，直接使用提供的虚拟机就行，十分方便。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;cmath&gt;</span><br><span class="line"></span><br><span class="line">#include&lt;eigen3/Eigen/Core&gt;</span><br><span class="line"></span><br><span class="line">#include&lt;eigen3/Eigen/Dense&gt;</span><br><span class="line"></span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">#define MY_PIE 3.1415926</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    // Basic Example of cpp</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; &quot;Example of cpp \n&quot;;</span><br><span class="line"></span><br><span class="line">    float a = 1.0, b = 2.0;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; a &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; a/b &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; std::sqrt(b) &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; std::acos(-1) &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; std::sin(30.0/180.0*acos(-1)) &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    // Example of vector</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; &quot;Example of vector \n&quot;;</span><br><span class="line"></span><br><span class="line">    // vector definition</span><br><span class="line"></span><br><span class="line">    Eigen::Vector3f v(1.0f,2.0f,3.0f);</span><br><span class="line"></span><br><span class="line">    Eigen::Vector3f w(1.0f,0.0f,0.0f);</span><br><span class="line"></span><br><span class="line">    // vector output</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; &quot;Example of output \n&quot;;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; v &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    // vector add</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; &quot;Example of add \n&quot;;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; v + w &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    // vector scalar multiply</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; &quot;Example of scalar multiply \n&quot;;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; v * 3.0f &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; 2.0f * v &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    // Example of matrix</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; &quot;Example of matrix \n&quot;;</span><br><span class="line"></span><br><span class="line">    // matrix definition</span><br><span class="line"></span><br><span class="line">    Eigen::Matrix3f i,j;</span><br><span class="line"></span><br><span class="line">    i &lt;&lt; 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0;</span><br><span class="line"></span><br><span class="line">    j &lt;&lt; 2.0, 3.0, 1.0, 4.0, 6.0, 5.0, 9.0, 7.0, 8.0;</span><br><span class="line"></span><br><span class="line">    // matrix output</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; &quot;Example of output \n&quot;;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; i &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    // matrix add i + j</span><br><span class="line"></span><br><span class="line">    // matrix scalar multiply i * 2.0</span><br><span class="line"></span><br><span class="line">    // matrix multiply i * j</span><br><span class="line"></span><br><span class="line">    // matrix multiply vector i * v</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line"></span><br><span class="line">    * PA 0</span><br><span class="line"></span><br><span class="line">    */</span><br><span class="line"></span><br><span class="line">    // TO DO: Define point P</span><br><span class="line"></span><br><span class="line">    // TO DO: Define rotation matrix M</span><br><span class="line"></span><br><span class="line">    // TO DO: M * P</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    Eigen::Vector3f P = &#123;2,1,1&#125;;</span><br><span class="line"></span><br><span class="line">    Eigen::Matrix3f M,L;</span><br><span class="line"></span><br><span class="line">    float angle = 45.0*MY_PIE/180.0;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    M &lt;&lt; cos(angle),-sin(angle),0,</span><br><span class="line"></span><br><span class="line">         sin(angle),cos(angle),0,</span><br><span class="line"></span><br><span class="line">         0,0,1;</span><br><span class="line"></span><br><span class="line">    L &lt;&lt; 1,0,1,</span><br><span class="line"></span><br><span class="line">         0,1,2,</span><br><span class="line"></span><br><span class="line">         0,0,1;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    std::cout&lt;&lt;L*M*P&lt;&lt;std::endl;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Games101 </tag>
            
            <tag> Notes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lec 05~06 - Rasterization 光栅化(离散化三角形、深度测试与抗锯齿)</title>
      <link href="/2023/04/10/Lec%2005~06%20-%20Rasterization%20%E5%85%89%E6%A0%85%E5%8C%96(%E7%A6%BB%E6%95%A3%E5%8C%96%E4%B8%89%E8%A7%92%E5%BD%A2%E3%80%81%E6%B7%B1%E5%BA%A6%E6%B5%8B%E8%AF%95%E4%B8%8E%E6%8A%97%E9%94%AF%E9%BD%BF)/"/>
      <url>/2023/04/10/Lec%2005~06%20-%20Rasterization%20%E5%85%89%E6%A0%85%E5%8C%96(%E7%A6%BB%E6%95%A3%E5%8C%96%E4%B8%89%E8%A7%92%E5%BD%A2%E3%80%81%E6%B7%B1%E5%BA%A6%E6%B5%8B%E8%AF%95%E4%B8%8E%E6%8A%97%E9%94%AF%E9%BD%BF)/</url>
      
        <content type="html"><![CDATA[<p>屏幕由像素点构成，是离散的，二维的</p><p>计算机生成图像中，最基本的二维元素是三角形，对其的离散化操作就是生成图像的重点</p><p>如何离散化（光栅化，Rasterization）？Sampling采样！</p><p>一个像素点对应一个坐标点，对这个坐标点采样，判断它在不在三角形里面，</p><p>采样的缺点：以点代面，有失偏颇 → Aliasing 走样，表现为锯齿</p><p>Sampling Artifacts (Errors &#x2F; Mistakes &#x2F; Inaccuracies) in Computer Graphics：</p><ul><li>Jaggies (Staircase Pattern)：an example of “aliasing” – a sampling error<ul><li>空间上Signals are changing too frequent (high frequency), but sampled too slowly</li></ul></li><li>Moiré Patterns in Imaging 摩尔纹</li><li>Wagon Wheel Illusion (False Motion)：倒着转的轮子<ul><li>时间上Signals are changing too fast (high frequency), but sampled too slowly</li></ul></li></ul><hr><p>Antialiased Sampling</p><p>一种方法：先Filter后采样</p><ul><li>Filter包括诸如卷积的方法</li></ul><p>什么是Filter？数据经过一定的处理</p><p>Filtering &#x3D; Getting rid of certain frequency contents 滤波器</p><ul><li>Convolution (&#x3D; Averaging) 卷积（可以看作一种低通滤波器）</li></ul><p>Sampling &#x3D; Repeating Frequency Contents<br>    sampling 是在频域上 copy &amp; paste 波形<br><a href="https://imgse.com/i/ppbxULq"><img src="https://s1.ax1x.com/2023/04/10/ppbxULq.png"></a><br>Aliasing &#x3D; Mixed Frequency Contents<br>    采样率不够的 copy &amp; paste 导致波形会有重叠</p><p><a href="https://imgse.com/i/ppbxde0"><img src="https://s1.ax1x.com/2023/04/10/ppbxde0.png"></a></p><p>How Can We Reduce Aliasing Error?</p><ul><li>Option 1: Increase sampling rate<ul><li>increasing the distance between replicas in the Fourier domain</li><li>Higher resolution displays, sensors, framebuffers</li><li>costly &amp; may need very high resolution</li></ul></li><li>Option 2: Antialiasing<ul><li>Filtering out high frequencies before sampling</li><li>于是就不会有重叠了：</li></ul></li></ul><p><a href="https://imgse.com/i/ppbx0oT"><img src="https://s1.ax1x.com/2023/04/10/ppbx0oT.png"></a></p><ul><li>Antialiasing &#x3D; Limiting, then repeating</li></ul><p>Antialiased Sampling：Pre-Filter → Sample</p><p>convolving &#x3D; filtering &#x3D; averaging</p><p>先模糊再采样 vs 先采样再模糊</p><ul><li>先采样后模糊（Filter）是不行的<ul><li>波形重叠的情况下截断依然会有重叠</li></ul></li></ul><p>最理想的状态：像素的颜色值为负责的区域内的平均值。</p><p>但是连续域的平均值是很难求的，计算量巨大</p><p>Antialiasing By Supersampling (MSAA)</p><ul><li>近似方法</li><li>Monte-Carlo</li><li>像素的颜色值为负责的区域内取样多次颜色值的平均。</li></ul><p>Antialiasing Today</p><ul><li>No free lunch!<ul><li>MSAA：每个像素多次采样，求平均。太浪费性能</li><li>优化：不使用均匀分布，采样复用</li><li>怎样分布样本才能达到最好的覆盖效果：Blue Noise?</li></ul></li><li>Milestones：目前得到广泛应用<ul><li>FXAA (Fast Approximate AA)：先获得有锯齿的图，再后处理去除锯齿（很快）<ul><li>找到边界，换成没有锯齿的边界，（图像匹配）非常快</li><li>方法和采样无关，采样虽然有误，但是这种方法可以弥补</li></ul></li><li>TAA (Tem‘poral AA) ：时序信息，借助前面帧的信息<ul><li>最近刚刚兴起</li><li>静态场景，相邻两帧同一像素用不同的位置来sample</li><li>把MSAA的Sampling分布在时间上</li><li>运动情况下怎么办？</li></ul></li></ul></li><li>Super resolution &#x2F; super sampling 超分辨率<ul><li>From low resolution to high resolution</li><li>Essentially still “not enough samples” problem 类似抗锯齿</li><li>DLSS (Deep Learning Super Sampling) 猜</li></ul></li></ul><p>Visibility &#x2F; Occlusion</p><h2 id="深度缓存-Z-buffer"><a href="#深度缓存-Z-buffer" class="headerlink" title="深度缓存 Z-buffer"></a>深度缓存 Z-buffer</h2><p>Painter’s Algorithm(画家)：由远及近画画，覆盖</p><ul><li>深度计算与排序：O(nlogn)</li><li>可能有无法排序的情况：例如三个三角形互相重叠</li></ul><p>Z-buffer：对每个像素多存一个深度</p><ul><li>实际coding中，(smaller z -&gt; further, larger z -&gt; closer)</li></ul><p><a href="https://imgse.com/i/ppbx6SJ"><img src="https://s1.ax1x.com/2023/04/10/ppbx6SJ.png" alt="ppbx6SJ.png"></a></p><p>复杂度：O(n) for n triangles 并不是排序，而是只要最值</p><p>需要保证三角形进入顺序和结果无关</p><p>无法处理透明物体</p>]]></content>
      
      
      
        <tags>
            
            <tag> Games101 </tag>
            
            <tag> Notes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lec 03~04 - Transformation 基础变换、三维到二维变换(模型、视图、投影)</title>
      <link href="/2023/04/10/Lec%2003~04%20-%20Transformation%20%E5%9F%BA%E7%A1%80%E5%8F%98%E6%8D%A2%E3%80%81%E4%B8%89%E7%BB%B4%E5%88%B0%E4%BA%8C%E7%BB%B4%E5%8F%98%E6%8D%A2(%E6%A8%A1%E5%9E%8B%E3%80%81%E8%A7%86%E5%9B%BE%E3%80%81%E6%8A%95%E5%BD%B1)/"/>
      <url>/2023/04/10/Lec%2003~04%20-%20Transformation%20%E5%9F%BA%E7%A1%80%E5%8F%98%E6%8D%A2%E3%80%81%E4%B8%89%E7%BB%B4%E5%88%B0%E4%BA%8C%E7%BB%B4%E5%8F%98%E6%8D%A2(%E6%A8%A1%E5%9E%8B%E3%80%81%E8%A7%86%E5%9B%BE%E3%80%81%E6%8A%95%E5%BD%B1)/</url>
      
        <content type="html"><![CDATA[<ul><li>基础变换（仿射变换）：旋转、缩放、切变、平移<ul><li>先后顺序很重要，需要仔细想</li><li>仿射变换&#x3D;线性变换+平移</li><li>线性变换&#x3D;旋转+缩放+切变</li></ul></li><li>齐次坐标系：n维的点&#x2F;向量，用[n+1 x 1]的列向量表示<ul><li>变换用[n+1 x n+1]的矩阵左乘来表示</li><li>多个变换可以组合起来变成一个矩阵→加速计算</li></ul></li></ul><p>旋转的表示：</p><ul><li>欧拉角：roll, pitch, yaw</li><li>四元数：</li></ul><p>MVP：</p><ul><li><p>Model transformation (placing objects)</p><p>想象一下：世界坐标系下有很多Object，用一个变化矩阵把它们的顶点坐标从Local坐标系（相对）转换到世界Global坐标系（绝对）。这就是placing objects</p></li><li><p>View transformation (placing camera)</p><p>想象一下：我们看到的画面由摄像机捕捉，摄像机参数决定了我们在屏幕上看到的东西，这一步可以将世界坐标系转换到摄像机坐标系。</p></li><li><p>Projection transformation</p><p>摄像机坐标系，视锥体，再规整一下</p></li></ul><p>Viewing (观测) transformation</p><ul><li>View (视图) &#x2F; Camera transformation</li><li>Projection (投影) transformation<ul><li>Orthographic projection (cuboid to “canonical” cube [-1, 1]^3)</li><li>Perspective projection (frustum to “canonical” cube)<ul><li>First “squish” the frustum into a cuboid</li><li>Then Do orthographic projection</li></ul></li></ul></li></ul><hr><p>向量以一列的矩阵表示（nx1）</p><p>矩阵(nxn)表示变换，在向量左边，左乘</p><ul><li><p>旋转：绕某个轴旋转某个角度</p><ul><li><p>轴：向量，六个自由度（由两个点确定一条直线）</p></li><li><p>角度：值</p></li><li><p>绕经过原点的轴：Rodrigues’ Rotation Formula：</p><p>$$ \mathbf{R}(\mathbf{n}, \alpha)&#x3D;\cos (\alpha) \mathbf{I}+(1-\cos (\alpha)) \mathbf{n} \mathbf{n}^{T}+\sin (\alpha)\left(\begin{array}{ccc} 0 &amp; -n_{z} &amp; n_{y} \ n_{z} &amp; 0 &amp; -n_{x} \ -n_{y} &amp; n_{x} &amp; 0 \end{array}\right) $$</p></li><li><p>绕空间中任意轴旋转：<a href="https://zhuanlan.zhihu.com/p/56587491">三维空间绕任意轴旋转矩阵的推导 - 知乎</a></p></li></ul></li><li><p>平移：三个自由度</p></li><li><p>缩放：三个自由度</p></li></ul><p>若绕静坐标系（世界坐标系）旋转，则左乘，也是变换矩阵X坐标矩阵；若是绕动坐标系旋转（自身建立一个坐标系），则右乘，也就是坐标矩阵X变换矩阵。 即，左乘是相对于坐标值所在的坐标系（世界坐标系）下的三个坐标轴进行旋转变换。而右乘则是以当前点为旋转中心，进行旋转变换。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Games101 </tag>
            
            <tag> Notes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lec 02 - Linear Algebra 向量和线性代数</title>
      <link href="/2023/04/10/Lec%2002%20-%20Linear%20Algebra%20%E5%90%91%E9%87%8F%E5%92%8C%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"/>
      <url>/2023/04/10/Lec%2002%20-%20Linear%20Algebra%20%E5%90%91%E9%87%8F%E5%92%8C%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>Graphics’ Dependencies</p><ul><li>Basic mathematics<ul><li>Linear algebra, calculus, statistics</li></ul></li><li>Basic physics<ul><li>Optics, Mechanics</li></ul></li><li>Misc<ul><li>Signal processing</li><li>Numerical analysis</li></ul></li><li>Aesthetics</li></ul><p>图形学默认向量是列向量。<br>课程使用右手坐标系。</p><p>叉乘：</p><ul><li>左侧还是右侧（逆时针还是顺时针,根据向量A叉乘向量B等于负的向量B叉乘向量A）<ul><li>叉乘结果为正&#x2F;负</li></ul></li><li>内侧还是外侧<ul><li>P点一直在三条边的左边&#x2F;右边</li></ul></li></ul><p><a href="https://imgse.com/i/ppbvxz9"><img src="https://s1.ax1x.com/2023/04/10/ppbvxz9.png"></a></p><p>Rotate M<br><a href="https://imgse.com/i/ppbzMc9"><img src="https://s1.ax1x.com/2023/04/10/ppbzMc9.png" alt="ppbzMc9.png"></a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Games101 </tag>
            
            <tag> Notes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lec 01 - Overview 计算机图形学概述</title>
      <link href="/2023/04/10/Lec%2001%20-%20Overview%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E6%A6%82%E8%BF%B0/"/>
      <url>/2023/04/10/Lec%2001%20-%20Overview%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<p>Why study Computer Graphics?</p><ul><li>Applications: Video Games, Movies, Animations, Design, Visualization, VR&amp;AR, Digital Illustration, Simulation, GUI, Typography</li><li>Fundamental Intellectual Challenges<ul><li>Creates and interacts with realistic virtual world</li><li>Requires understanding of all aspects of physical world</li><li>New computing methods, displays, technologies</li></ul></li><li>Technical Challenges<ul><li>Math of (perspective) projections, curves, surfaces</li><li>Physics of lighting and shading</li><li>Representing &#x2F; operating shapes in 3D</li><li>Animation &#x2F; simulation</li><li><del>3D graphics software programming and hardware</del></li></ul></li></ul><p>Course Topics (mainly 4 parts)</p><ul><li>Rasterization</li><li>Curves and Meshes</li><li>Ray Tracing</li><li>Animation &#x2F; Simulation</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Games101 </tag>
            
            <tag> Notes </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
